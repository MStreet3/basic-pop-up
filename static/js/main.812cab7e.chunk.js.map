{"version":3,"sources":["MainComponent.js","App.js","serviceWorker.js","index.js"],"names":["Main","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modalIsActive","toggleModal","bind","assertThisInitialized","setState","react_default","a","createElement","reactstrap_es","fluid","className","color","onClick","isOpen","toggle","onSubmit","row","for","type","placeholder","id","block","Component","App","MainComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAkFeA,cAjEb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,eAAe,GAEjBR,EAAKS,YAAcT,EAAKS,YAAYC,KAAjBT,OAAAU,EAAA,EAAAV,CAAAD,IALFA,6EASjBG,KAAKS,SAAS,CACZJ,eAAgBL,KAAKI,MAAMC,iDAK7B,OACEK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,OAAK,GACdJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWC,OAAK,GACdJ,EAAAC,EAAAC,cAAA,MAAIG,UAAU,aAAd,sBACAL,EAAAC,EAAAC,cAAA,KAAGG,UAAU,QAAb,6CAGJL,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKE,UAAU,eACbL,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQG,MAAM,UAAUC,QAASjB,KAAKM,aAAtC,aAMNI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOK,OAAQlB,KAAKI,MAAMC,cAAec,OAAQnB,KAAKM,aACpDI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAaM,OAAQnB,KAAKM,cAC1BI,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAMO,SAAUpB,KAAKM,aACnBI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWQ,KAAG,GACZX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOS,IAAI,cAAX,SACAZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEU,KAAK,OACLC,YAAY,8BACZC,GAAG,gBAGPf,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAWQ,KAAG,GACZX,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOS,IAAI,YAAX,oBACAZ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEU,KAAK,WACLC,YAAY,iCACZC,GAAG,cAGPf,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAQa,OAAK,EAACV,MAAM,UAAUC,QAASjB,KAAKM,aAA5C,sBAtDGqB,aCTJC,MAJf,WACE,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO1B,EAAAC,EAAAC,cAACyB,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAACC,GAClCA,EAAaC","file":"static/js/main.812cab7e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Jumbotron,\n  Container,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  Button,\n  Row,\n  Col\n} from 'reactstrap';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      modalIsActive: false\n    };\n    this.toggleModal = this.toggleModal.bind(this);\n  }\n\n  toggleModal() {\n    this.setState({\n      modalIsActive: !this.state.modalIsActive\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Jumbotron fluid>\n          <Container fluid>\n            <h1 className=\"display-4\">Welcome to my App!</h1>\n            <p className=\"lead\">Click the blue Log In button to log in.</p>\n          </Container>\n        </Jumbotron>\n        <Container>\n          <Row>\n            <Col className=\"text-center\">\n              <Button color=\"primary\" onClick={this.toggleModal}>\n                Log In\n              </Button>\n            </Col>\n          </Row>\n        </Container>\n        <Modal isOpen={this.state.modalIsActive} toggle={this.toggleModal}>\n          <ModalHeader toggle={this.toggleModal} />\n          <ModalBody>\n            <Container>\n              <Form onSubmit={this.toggleModal}>\n                <FormGroup row>\n                  <Label for=\"emailLogIn\">Email</Label>\n                  <Input\n                    type=\"text\"\n                    placeholder=\"Enter your account's email.\"\n                    id=\"emailLogIn\"\n                  />\n                </FormGroup>\n                <FormGroup row>\n                  <Label for=\"password\">Account Password</Label>\n                  <Input\n                    type=\"password\"\n                    placeholder=\"Enter your account's password.\"\n                    id=\"password\"\n                  />\n                </FormGroup>\n                <Button block color=\"primary\" onClick={this.toggleModal}>\n                  Log In\n                </Button>\n              </Form>\n            </Container>\n          </ModalBody>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport Main from './MainComponent';\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}